// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	"fmt"
	mock "github.com/stretchr/testify/mock"
	"go-hexagonal-auth/business/admin"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}


func (_m *Repository) FindAllAdmin(skip int, rowPerPage int) ([]admin.Admin, error) {
	ret := _m.Called(skip, rowPerPage)

	var r0 []admin.Admin
	if rf, ok := ret.Get(0).(func(int, int) []admin.Admin); ok {
		r0 = rf(skip, rowPerPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.Admin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(skip, rowPerPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *Repository) FindAdminByID(id int) (*admin.Admin, error){
	ret := _m.Called(id)

	var r0 *admin.Admin
	if rf, ok := ret.Get(0).(func(int) *admin.Admin); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Admin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *Repository) FindAdminByAdminnameAndPassword(username string, password string) (*admin.Admin, error) {
	fmt.Println("OK")
	ret := _m.Called(username, password)

	var r0 *admin.Admin
	if rf, ok := ret.Get(0).(func(string, string) *admin.Admin); ok {
		r0 = rf(username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Admin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *Repository) InsertAdmin(_a0 admin.Admin) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(admin.Admin) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

func (_m *Repository) UpdateAdmin(_a0 admin.Admin) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(admin.Admin) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	admin "go-hexagonal-auth/business/admin"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// FindAllUser provides a mock function with given fields: skip, rowPerPage
func (_m *Service) FindAllUser(skip int, rowPerPage int) ([]admin.Admin, error) {
	ret := _m.Called(skip, rowPerPage)

	var r0 []admin.Admin
	if rf, ok := ret.Get(0).(func(int, int) []admin.Admin); ok {
		r0 = rf(skip, rowPerPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.Admin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(skip, rowPerPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByID provides a mock function with given fields: id
func (_m *Service) FindAdminByID(id int) (*admin.Admin, error) {
	ret := _m.Called(id)

	var r0 *admin.Admin
	if rf, ok := ret.Get(0).(func(int) *admin.Admin); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Admin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByUsernameAndPassword provides a mock function with given fields: username, password
func (_m *Service) FindAdminByAdminnameAndPassword(username string, password string) (*admin.Admin, error) {
	ret := _m.Called(username, password)

	var r0 *admin.Admin
	if rf, ok := ret.Get(0).(func(string, string) *admin.Admin); ok {
		r0 = rf(username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Admin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertUser provides a mock function with given fields: insertUserSpec, createdBy
func (_m *Service) InsertAdmin(insertUserSpec admin.InsertAdminSpec, createdBy string) error {
	ret := _m.Called(insertUserSpec, createdBy)

	var r0 error
	if rf, ok := ret.Get(0).(func(admin.InsertAdminSpec, string) error); ok {
		r0 = rf(insertUserSpec, createdBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: id, name, modifiedBy, currentVersion
func (_m *Service) UpdateAdmin(id int, name string, modifiedBy string) error {
	ret := _m.Called(id, name, modifiedBy)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, string) error); ok {
		r0 = rf(id, name, modifiedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	"go-hexagonal-auth/api/v1/auth/request"
	"go-hexagonal-auth/business/admin"
	"go-hexagonal-auth/business/user"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}


// FindUserByID provides a mock function with given fields: id
func (_m *Service) Login(username string, is_admin bool) (*user.User, error) {
	ret := _m.Called(username, is_admin)

	var r0 *user.User
	if rf, ok := ret.Get(0).(func(string, bool) *user.User); ok {
		r0 = rf(username, is_admin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(username, is_admin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *Service) RegisterAdmin(req request.RegisterAdminRequest) (*request.RegisterAdminRequest, error)  {

	ret := _m.Called(req)

	var r0 *request.RegisterAdminRequest
	if rf, ok := ret.Get(0).(func(request.RegisterAdminRequest) *request.RegisterAdminRequest); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.RegisterAdminRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.RegisterAdminRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *Service) RegisterUser(req request.RegisterUserRequest) (*request.RegisterUserRequest, error)  {
	ret := _m.Called(req)

	var r0 *request.RegisterUserRequest
	if rf, ok := ret.Get(0).(func(request.RegisterUserRequest) *request.RegisterUserRequest); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.RegisterUserRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.RegisterUserRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *Service) FindAdminByAdminnameAndPassword(Adminname string, password string) (*admin.Admin, error) {
	ret := _m.Called(Adminname, password)

	var r0 *admin.Admin
	if rf, ok := ret.Get(0).(func(string, string) *admin.Admin); ok {
		r0 = rf(Adminname, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Admin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(Adminname, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}